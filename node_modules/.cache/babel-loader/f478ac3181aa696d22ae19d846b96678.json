{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alstanley\\\\Desktop\\\\React\\\\MERNTask\\\\cliente\\\\src\\\\components\\\\tareas\\\\FormTarea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormTarea = () => {\n  _s();\n\n  // Extrar si un proyecto esta activo\n  const proyectosContext = useContext(proyectoContext);\n  const {\n    proyecto\n  } = proyectosContext; // obtener la funci贸n del context de tarea\n\n  const tareasContext = useContext(tareaContext);\n  const {\n    tareaseleccionada,\n    errortarea,\n    agregarTarea,\n    validarTarea,\n    obtenerTareas,\n    actualizarTarea,\n    limpiarTarea\n  } = tareasContext; // Effect que detecta si hay una tarea seleccionada\n\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      guardarTarea(tareaseleccionada);\n    } else {\n      guardarTarea({\n        nombre: ''\n      });\n    }\n  }, [tareaseleccionada]); // State del formulario\n\n  const [tarea, guardarTarea] = useState({\n    nombre: ''\n  }); // extraer el nombre del proyecto\n\n  const {\n    nombre\n  } = tarea; // Si no hay proyecto seleccionado\n\n  if (!proyecto) return null; // Array destructuring para extraer el proyecto actual\n\n  const [proyectoActual] = proyecto; // Leer los valores del formulario\n\n  const handleChange = e => {\n    guardarTarea({ ...tarea,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); // validar\n\n    if (nombre.trim() === '') {\n      validarTarea();\n      return;\n    } // Si es edici贸n o si es nueva tarea\n\n\n    if (tareaseleccionada === null) {\n      // agregar la nueva tarea al state de tareas\n      tarea.proyecto = proyectoActual._id;\n      agregarTarea(tarea);\n    } else {\n      // actualizar tarea existente\n      actualizarTarea(tarea); // Elimina tareaseleccionada del state\n\n      console.log(tareaseleccionada);\n      console.log(proyectoActual._id);\n      limpiarTarea();\n    } // Obtener y filtrar las tareas del proyecto actual\n\n\n    obtenerTareas(proyectoActual.id); // reiniciar el form\n\n    guardarTarea({\n      nombre: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulario\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor-input\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input-text\",\n          placeholder: \"Nombre Tarea...\",\n          name: \"nombre\",\n          value: nombre,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor-input\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          className: \"btn btn-primario btn-submit btn-block\",\n          value: tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), errortarea ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mensaje error\",\n      children: \"El nombre de la tarea es obligatorio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 27\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormTarea, \"l0NRQTYw6yLy5PCX0JFiYsn6i98=\");\n\n_c = FormTarea;\nexport default FormTarea;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTarea\");","map":{"version":3,"sources":["C:/Users/alstanley/Desktop/React/MERNTask/cliente/src/components/tareas/FormTarea.js"],"names":["React","useContext","useState","useEffect","proyectoContext","tareaContext","FormTarea","proyectosContext","proyecto","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","obtenerTareas","actualizarTarea","limpiarTarea","guardarTarea","nombre","tarea","proyectoActual","handleChange","e","target","name","value","onSubmit","preventDefault","trim","_id","console","log","id"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';  \nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\nconst FormTarea = () => {\n\n    // Extrar si un proyecto esta activo\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto } = proyectosContext;\n\n    // obtener la funci贸n del context de tarea\n    const tareasContext = useContext(tareaContext);\n    const { tareaseleccionada,  errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext;\n\n    // Effect que detecta si hay una tarea seleccionada\n    useEffect(() => {\n        if(tareaseleccionada !== null) {\n            guardarTarea(tareaseleccionada)\n        } else {\n            guardarTarea({\n                nombre: ''\n            })\n        }\n    }, [tareaseleccionada]); \n\n    // State del formulario\n    const [tarea, guardarTarea] = useState({\n        nombre: ''\n    })\n\n    // extraer el nombre del proyecto\n    const { nombre } = tarea;\n\n    // Si no hay proyecto seleccionado\n    if(!proyecto) return null;\n\n    // Array destructuring para extraer el proyecto actual\n    const [proyectoActual] =  proyecto;\n\n    // Leer los valores del formulario\n    const handleChange = e => {\n        guardarTarea({\n            ...tarea,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        // validar\n        if(nombre.trim() === '' ) {\n            validarTarea();\n            return;\n        }\n\n        // Si es edici贸n o si es nueva tarea\n        if(tareaseleccionada === null ) {\n            // agregar la nueva tarea al state de tareas\n            tarea.proyecto = proyectoActual._id;\n            agregarTarea(tarea);\n        } else {\n            // actualizar tarea existente\n            actualizarTarea(tarea);\n\n            // Elimina tareaseleccionada del state\n            console.log(tareaseleccionada)\n            console.log(proyectoActual._id)\n            limpiarTarea();\n        }\n        // Obtener y filtrar las tareas del proyecto actual\n        obtenerTareas(proyectoActual.id);\n\n        // reiniciar el form\n        guardarTarea({\n            nombre: ''\n        })\n    }\n\n    return ( \n        <div className=\"formulario\">\n            <form\n                onSubmit={onSubmit}\n            >\n                <div className=\"contenedor-input\">\n                    <input \n                        type=\"text\"\n                        className=\"input-text\"\n                        placeholder=\"Nombre Tarea...\"\n                        name=\"nombre\"\n                        value={nombre}\n                        onChange={handleChange}\n                    />\n                </div>\n\n                <div className=\"contenedor-input\">\n                    <input \n                        type=\"submit\"\n                        className=\"btn btn-primario btn-submit btn-block\"\n                        value={tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}\n                    />\n                </div>\n            </form>\n\n            {errortarea ? <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p> : null }\n        </div>\n     );\n}\n \nexport default FormTarea;"]},"metadata":{},"sourceType":"module"}