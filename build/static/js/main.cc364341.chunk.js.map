{"version":3,"sources":["context/alertas/alertaContext.js","context/autenticacion/authContext.js","components/auth/Login.js","components/auth/NuevaCuenta.js","context/proyectos/proyectoContext.js","components/proyectos/NuevoProyecto.js","context/tareas/tareaContext.js","components/proyectos/Proyecto.js","components/proyectos/ListadoProyectos.js","components/layout/Sidebar.js","components/layout/Barra.js","components/tareas/FormTarea.js","components/tareas/Tarea.js","components/tareas/ListadoTareas.js","components/proyectos/Proyectos.js","types/index.js","context/proyectos/proyectoReducer.js","config/axios.js","context/proyectos/proyectoState.js","context/tareas/tareaReducer.js","context/tareas/tareaState.js","context/alertas/alertaReducer.js","context/alertas/alertaState.js","context/autenticacion/authReducer.js","config/token.js","context/autenticacion/authState.js","components/rutas/RutaPrivada.js","App.js","serviceWorker.js","index.js"],"names":["alertaContext","createContext","authContext","Login","props","useContext","AlertaContext","alerta","mostrarAlerta","AuthContext","mensaje","autenticado","iniciarSesion","useEffect","history","push","msg","categoria","useState","email","password","usuario","guardarUsuario","onChange","e","target","name","value","className","onSubmit","preventDefault","trim","htmlFor","type","id","placeholder","to","NuevaCuenta","registrarUsuario","nombre","confirmar","length","proyectoContext","NuevoProyecto","proyectosContext","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","proyecto","guardarProyecto","onClick","tareaContext","Proyecto","proyectoActual","obtenerTareas","_id","ListadoProyectos","proyectos","obtenerProyectos","TransitionGroup","map","CSSTransition","timeout","classNames","Sidebar","Barra","usuarioAutenticado","cerrarSesion","FormTarea","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","actualizarTarea","limpiarTarea","guardarTarea","tarea","Tarea","eliminarTarea","guardarTareaActual","cambiarEstado","estado","seleccionarTarea","ListadoTareas","eliminarProyecto","tareasproyecto","Proyectos","FORMULARIO_PROYECTO","OBTENER_PROYECTOS","AGREGAR_PROYECTO","VALIDAR_FORMULARIO","PROYECTO_ACTUAL","ELIMINAR_PROYECTO","PROYECTO_ERROR","TAREAS_PROYECTO","AGREGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","TAREA_ACTUAL","ACTUALIZAR_TAREA","LIMPIAR_TAREA","MOSTRAR_ALERTA","OCULTAR_ALERTA","REGISTRO_EXITOSO","REGISTRO_ERROR","OBTENER_USUARIO","LOGIN_EXITOSO","LOGIN_ERROR","CERRAR_SESION","state","action","payload","filter","clienteAxios","axios","create","baseURL","process","ProyectoState","useReducer","proyectoReducer","dispatch","a","get","resultado","data","post","console","log","proyectoId","delete","Provider","children","TareaState","TareaReducer","params","tareas","put","tareaExiste","AlertaState","alertaReducer","setTimeout","localStorage","setItem","token","cargando","removeItem","tokenAuth","defaults","headers","common","AuthState","initialState","getItem","AuthReducer","datos","respuesta","response","RutaPrivada","Component","component","render","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc364341.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst alertaContext = createContext();\n\nexport default alertaContext;","import { createContext } from 'react';\n\nconst authContext = createContext();\n\nexport default authContext;","import React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport AlertaContext from '../../context/alertas/alertaContext';\nimport AuthContext from '../../context/autenticacion/authContext';\n\nconst Login = (props) => {\n\n    // extraer los valores del context\n    const alertaContext = useContext(AlertaContext);\n    const { alerta, mostrarAlerta } = alertaContext;\n\n    const authContext = useContext(AuthContext);\n    const { mensaje, autenticado, iniciarSesion } = authContext;\n\n      // En caso de que el password o usuario no exista\n      useEffect(() => {\n        if(autenticado) {\n            props.history.push('/proyectos');\n        }\n\n        if(mensaje) {\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\n        }\n        // eslint-disable-next-line\n    }, [mensaje, autenticado, props.history]);\n\n    // State para iniciar sesión\n    const [usuario, guardarUsuario] = useState({\n        email: '',\n        password: ''\n    });\n\n    // extraer de usuario\n    const { email, password } = usuario;\n\n    const onChange = e => {\n        guardarUsuario({\n            ...usuario,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    // Cuando el usuario quiere iniciar sesión\n    const onSubmit = e => {\n        e.preventDefault();\n\n        // Validar que no haya campos vacios\n        if(email.trim() === '' || password.trim() === '') {\n            mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\n        }\n\n        // Pasarlo al action\n        iniciarSesion({ email, password });\n    }\n\n\n\n    return ( \n        <div className=\"form-usuario\">\n            { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null }\n\n            <div className=\"contenedor-form sombra-dark\">\n                <h1>Iniciar Sesión</h1>\n\n                <form\n                    onSubmit={onSubmit}\n                >\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input \n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            placeholder=\"Tu Email\"\n                            value={email}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input \n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            placeholder=\"Tu Password\"\n                            value={password}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Iniciar Sesión\" />\n                    </div>\n                </form>\n\n                <Link to={'/nueva-cuenta'} className=\"enlace-cuenta\">\n                    Obtener Cuenta\n                </Link>\n            </div>\n        </div>\n     );\n}\n \nexport default Login;","import React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport AlertaContext from '../../context/alertas/alertaContext';\nimport AuthContext from '../../context/autenticacion/authContext';\n\nconst NuevaCuenta = (props) => {\n\n    // extraer los valores del context\n    const alertaContext = useContext(AlertaContext);\n    const { alerta, mostrarAlerta } = alertaContext;\n\n    const authContext = useContext(AuthContext);\n    const { mensaje, autenticado,  registrarUsuario } = authContext;\n\n    // En caso de que el usuario se haya autenticado o registrado o sea un registro duplicado\n    useEffect(() => {\n        if(autenticado) {\n            props.history.push('/proyectos');\n        }\n\n        if(mensaje) {\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\n        }\n        // eslint-disable-next-line\n    }, [mensaje, autenticado, props.history]);\n\n    // State para iniciar sesión\n    const [usuario, guardarUsuario] = useState({\n        nombre: '',\n        email: '',\n        password: '',\n        confirmar: ''\n    });\n\n    // extraer de usuario\n    const { nombre, email, password, confirmar } = usuario;\n\n    const onChange = e => {\n        guardarUsuario({\n            ...usuario,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    // Cuando el usuario quiere iniciar sesión\n    const onSubmit = e => {\n        e.preventDefault();\n\n        // Validar que no haya campos vacios\n        if( nombre.trim() === '' || \n            email.trim() === '' || \n            password.trim() === '' || \n            confirmar.trim() === '' ) {\n                mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\n                return;\n            }\n\n        // Password minimo de 6 caracteres\n        if(password.length < 6) {\n            mostrarAlerta('El password debe ser de al menos 6 caracteres', 'alerta-error');\n            return;\n        }\n\n        // Los 2 passwords son iguales\n        if(password !== confirmar) {\n            mostrarAlerta('Los passwords no son iguales', 'alerta-error');\n            return;\n        }\n\n        // Pasarlo al action\n        registrarUsuario({\n            nombre, \n            email, \n            password\n        });\n    }\n\n\n\n    return ( \n        <div className=\"form-usuario\">\n            { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null }\n            <div className=\"contenedor-form sombra-dark\">\n                <h1>Obtener una cuenta</h1>\n\n                <form\n                    onSubmit={onSubmit}\n                >\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"nombre\">Nombre</label>\n                        <input \n                            type=\"text\"\n                            id=\"nombre\"\n                            name=\"nombre\"\n                            placeholder=\"Tu Nombre\"\n                            value={nombre}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input \n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            placeholder=\"Tu Email\"\n                            value={email}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input \n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            placeholder=\"Tu Password\"\n                            value={password}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"confirmar\">Confirmar Password</label>\n                        <input \n                            type=\"password\"\n                            id=\"confirmar\"\n                            name=\"confirmar\"\n                            placeholder=\"Repite tu Password\"\n                            value={confirmar}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Registrarme\" />\n                    </div>\n                </form>\n\n                <Link to={'/'} className=\"enlace-cuenta\">\n                    Volver a Iniciar Sesión\n                </Link>\n            </div>\n        </div>\n     );\n}\n \nexport default NuevaCuenta;","import { createContext } from 'react';\n\nconst proyectoContext = createContext();\n\nexport default proyectoContext;","import React, { Fragment, useState, useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\n\nconst NuevoProyecto = () => {\n\n    // Obtener el state del formulario\n    const proyectosContext = useContext(proyectoContext);\n    const { formulario, errorformulario,  mostrarFormulario, agregarProyecto, mostrarError } = proyectosContext;\n\n\n    // State para Proyecto\n    const [proyecto, guardarProyecto] = useState({\n        nombre: ''\n    });\n\n    // Extraer nombre de proyecto\n    const { nombre } = proyecto;\n\n    // Lee los contenidos del input\n    const onChangeProyecto = e => {\n        guardarProyecto({\n            ...proyecto,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    // Cuando el usuario envia un proyecto\n    const onSubmitProyecto = e => {\n        e.preventDefault();\n\n        // Validar el proyecto\n        if(nombre === '') {\n            mostrarError();\n            return;\n        }\n\n        // agregar al state\n        agregarProyecto(proyecto)\n\n        // Reiniciar el form\n        guardarProyecto({\n            nombre: ''\n        })\n    }\n\n    // Mostrar el formulario\n    const onClickFormulario = () => {\n        mostrarFormulario();\n    }\n\n    return ( \n        <Fragment>\n            <button \n                type=\"button\"\n                className=\"btn btn-block btn-primario\"\n                onClick={ onClickFormulario }\n            >Nuevo Proyecto</button>\n\n            { formulario ? \n                    (\n                        <form\n                            className=\"formulario-nuevo-proyecto\"\n                            onSubmit={onSubmitProyecto}\n                        >\n                            <input \n                                type=\"text\"\n                                className=\"input-text\"\n                                placeholder=\"Nombre Proyecto\"\n                                name=\"nombre\"\n                                value={nombre}\n                                onChange={onChangeProyecto}\n                            />\n\n                            <input \n                                type=\"submit\"\n                                className=\"btn btn-primario btn-block\"\n                                value=\"Agregar Proyecto\"\n                            />\n\n                        </form>\n                ) : null }\n\n            { errorformulario ? <p className=\"mensaje error\">El nombre del Proyecto es obligatorio</p>  : null }\n        </Fragment>\n     );\n}\n \nexport default NuevoProyecto;","import { createContext } from 'react';\n\nconst tareaContext = createContext();\n\nexport default tareaContext;","import React, { useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\nconst Proyecto = ({proyecto}) => {\n    // Obtener el state de proyectos\n    const proyectosContext = useContext(proyectoContext);\n    const { proyectoActual } = proyectosContext;\n\n    // obtener la función del context de tarea\n    const tareasContext = useContext(tareaContext);\n    const { obtenerTareas } = tareasContext;\n\n    // Función para agregar el proyecto actual\n    const seleccionarProyecto = id => {\n        proyectoActual(id); // Fijar un proyecto actual\n        obtenerTareas(id); // Filtrar las tareas cuando se de click\n    }\n\n    return ( \n        <li>\n            <button\n                type=\"button\"\n                className=\"btn btn-blank\"\n                onClick={ () => seleccionarProyecto(proyecto._id) }\n            >{proyecto.nombre} </button>\n        </li>\n     );\n}\n \nexport default Proyecto;","import React, { useContext, useEffect } from 'react';\nimport Proyecto from './Proyecto';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport AlertaContext from '../../context/alertas/alertaContext';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nconst ListadoProyectos = () => {\n\n    // Extrar proyectos de state inicial\n    const proyectosContext = useContext(proyectoContext);\n    const { mensaje, proyectos, obtenerProyectos } = proyectosContext;\n\n    const alertaContext = useContext(AlertaContext);\n    const { alerta, mostrarAlerta } = alertaContext;\n\n    // Obtener proyectos cuando carga el componente\n    useEffect(() => {\n        // si hay un error\n        if(mensaje) {\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\n        }\n\n        obtenerProyectos();\n        // eslint-disable-next-line\n    }, [mensaje]);\n\n    // revisar si proyectos tiene contenido\n    if(proyectos.length === 0 ) return <p>No hay proyectos, comienza creando uno</p>;\n\n    return ( \n\n        <ul className=\"listado-proyectos\">\n            \n        \n            { alerta   ? ( <div className={`alerta ${alerta.categoria} `}>{alerta.msg}</div>  ) : null  }\n\n\n            <TransitionGroup>\n                {proyectos.map(proyecto => (\n                    <CSSTransition\n                        key={proyecto._id}\n                        timeout={200}\n                        classNames=\"proyecto\"\n                    >\n                        <Proyecto \n                            proyecto={proyecto}\n                        />\n                    </CSSTransition>\n                ))}\n            </TransitionGroup>\n        </ul>\n     );\n}\n \nexport default ListadoProyectos;","import React from 'react';\nimport NuevoProyecto from '../proyectos/NuevoProyecto';\nimport ListadoProyectos from '../proyectos/ListadoProyectos';\n\nconst Sidebar = () => {\n    return ( \n        <aside>\n            <h1>MERN<span>Tasks</span></h1>\n\n            <NuevoProyecto />\n\n            <div className=\"proyectos\">\n                <h2>Tus Proyectos</h2>\n                <ListadoProyectos />\n            </div>\n        </aside>\n     );\n}\n \nexport default Sidebar;","import React, {useContext, useEffect} from 'react';\nimport AuthContext from '../../context/autenticacion/authContext';\n\n\nconst Barra = () => {\n\n    // Extraer la información de autenticación\n    const authContext = useContext(AuthContext);\n    const { usuario, usuarioAutenticado, cerrarSesion  } = authContext;\n\n    useEffect(() => {\n        usuarioAutenticado();\n        // eslint-disable-next-line\n    }, []);\n\n\n\n    return ( \n        <header className=\"app-header\">\n            {usuario ? <p className=\"nombre-usuario\">Hola <span>{usuario.nombre} </span> </p> : null}\n            \n\n            <nav className=\"nav-principal\">\n                <button \n                    className=\"btn btn-blank cerrar-sesion\"\n                    onClick={() => cerrarSesion() }\n                >Cerrar Sesión</button>\n            </nav>\n        </header>\n     );\n}\n \nexport default Barra;","import React, { useContext, useState, useEffect } from 'react';  \nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\nconst FormTarea = () => {\n\n    // Extrar si un proyecto esta activo\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto } = proyectosContext;\n\n    // obtener la función del context de tarea\n    const tareasContext = useContext(tareaContext);\n    const { tareaseleccionada,  errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext;\n\n    // Effect que detecta si hay una tarea seleccionada\n    useEffect(() => {\n        if(tareaseleccionada !== null) {\n            guardarTarea(tareaseleccionada)\n        } else {\n            guardarTarea({\n                nombre: ''\n            })\n        }\n    }, [tareaseleccionada]); \n\n    // State del formulario\n    const [tarea, guardarTarea] = useState({\n        nombre: ''\n    })\n\n    // extraer el nombre del proyecto\n    const { nombre } = tarea;\n\n    // Si no hay proyecto seleccionado\n    if(!proyecto) return null;\n\n    // Array destructuring para extraer el proyecto actual\n    const [proyectoActual] =  proyecto;\n\n    // Leer los valores del formulario\n    const handleChange = e => {\n        guardarTarea({\n            ...tarea,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        // validar\n        if(nombre.trim() === '' ) {\n            validarTarea();\n            return;\n        }\n\n        // Si es edición o si es nueva tarea\n        if(tareaseleccionada === null ) {\n            // agregar la nueva tarea al state de tareas\n            tarea.proyecto = proyectoActual._id;\n            agregarTarea(tarea);\n        } else {\n            // actualizar tarea existente\n            actualizarTarea(tarea);\n\n            // Elimina tareaseleccionada del state\n            limpiarTarea();\n        }\n        // Obtener y filtrar las tareas del proyecto actual\n        obtenerTareas(proyectoActual._id);\n\n        // reiniciar el form\n        guardarTarea({\n            nombre: ''\n        })\n    }\n\n    return ( \n        <div className=\"formulario\">\n            <form\n                onSubmit={onSubmit}\n            >\n                <div className=\"contenedor-input\">\n                    <input \n                        type=\"text\"\n                        className=\"input-text\"\n                        placeholder=\"Nombre Tarea...\"\n                        name=\"nombre\"\n                        value={nombre}\n                        onChange={handleChange}\n                    />\n                </div>\n\n                <div className=\"contenedor-input\">\n                    <input \n                        type=\"submit\"\n                        className=\"btn btn-primario btn-submit btn-block\"\n                        value={tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}\n                    />\n                </div>\n            </form>\n\n            {errortarea ? <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p> : null }\n        </div>\n     );\n}\n \nexport default FormTarea;","import React, { useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\nconst Tarea = ({tarea}) => {\n\n    // Extrar si un proyecto esta activo\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto } = proyectosContext;\n\n    // obtener la función del context de tarea\n    const tareasContext = useContext(tareaContext);\n    const { eliminarTarea, actualizarTarea, guardarTareaActual } = tareasContext;\n\n\n    // Extraer el proyecto\n    const [proyectoActual] = proyecto;\n \n    // Función que se ejecuta cuando el usuario presiona el btn de eliminar tarea\n    const tareaEliminar = id => {\n        eliminarTarea(id, proyectoActual._id);\n        // obtenerTareas(proyectoActual.id)\n    }\n\n    // Función que modifica el estado de las tareas\n    const cambiarEstado = tarea => {\n        if(tarea.estado) {\n            tarea.estado = false;\n        } else {\n            tarea.estado = true\n        }\n\n        actualizarTarea(tarea);\n    }\n\n    // Agrega una tarea actual cuando el usuario desea editarla\n    const seleccionarTarea = tarea => {\n        guardarTareaActual(tarea);\n    }\n\n    return ( \n        <li className=\"tarea sombra\">\n            <p>{tarea.nombre} </p>\n\n            <div className=\"estado\">\n                {tarea.estado \n                ?  \n                    (\n                        <button\n                            type=\"button\"\n                            className=\"completo\"\n                            onClick={() => cambiarEstado(tarea)}\n                        >Completo</button>\n                    )\n                : \n                    (\n                        <button\n                            type=\"button\"\n                            className=\"incompleto\"\n                            onClick={() => cambiarEstado(tarea)}\n                        >Incompleto</button>\n                    )\n                }\n            </div>\n\n            <div className=\"acciones\">\n                <button \n                    type=\"button\"\n                    className=\"btn btn-primario\"\n                    onClick={() => seleccionarTarea(tarea) }\n                >Editar</button>\n\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secundario\"\n                    onClick={() => tareaEliminar(tarea._id)}\n                >Eliminar</button>\n            </div>\n        </li>\n     );\n}\n \nexport default Tarea;","import React, { Fragment, useContext} from 'react';\nimport Tarea from './Tarea';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst ListadoTareas = () => {\n\n    // Extrar proyectos de state inicial\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto, eliminarProyecto } = proyectosContext;\n\n    // obtener las tareas del proyecto\n    const tareasContext = useContext(tareaContext);\n    const { tareasproyecto } = tareasContext;\n\n    // Si no hay proyecto seleccionado\n    if(!proyecto) return <h2>Selecciona un proyecto</h2>;\n\n    // Array destructuring para extraer el proyecto actual\n    const [proyectoActual] =  proyecto;\n\n    // Elimina un proyecto\n    const onClickEliminar = () => {\n        eliminarProyecto(proyectoActual._id)\n    }\n\n    return ( \n        <Fragment>\n            <h2>Proyecto: {proyectoActual.nombre} </h2>\n\n            <ul className=\"listado-tareas\">\n                {tareasproyecto.length === 0 \n                    ? (<li className=\"tarea\"><p>No hay tareas</p></li>) \n                    : \n                    <TransitionGroup>\n                    {tareasproyecto.map(tarea => (\n                        <CSSTransition\n                            key={tarea._id}\n                            timeout={200}\n                            classNames=\"tarea\"\n                        >\n                            <Tarea \n                                tarea={tarea}\n                            />\n                        </CSSTransition>\n                    ))}\n                    </TransitionGroup>\n                }\n            </ul>\n\n            <button     \n                type=\"button\"\n                className=\"btn btn-eliminar\"\n                onClick={onClickEliminar}\n            >Eliminar Proyecto &times;</button>\n        </Fragment>\n     );\n}\n \nexport default ListadoTareas;","import React, { useContext, useEffect } from 'react';\nimport Sidebar from '../layout/Sidebar';\nimport Barra from '../layout/Barra';\nimport FormTarea from '../tareas/FormTarea';\nimport ListadoTareas from '../tareas/ListadoTareas';\nimport AuthContext from '../../context/autenticacion/authContext';\n\nconst Proyectos = () => {\n\n    // Extraer la información de autenticación\n    const authContext = useContext(AuthContext);\n    const { usuarioAutenticado } = authContext;\n\n    useEffect(() => {\n        usuarioAutenticado();\n        // eslint-disable-next-line\n    }, [])\n\n    return ( \n        <div className=\"contenedor-app\">\n            <Sidebar />\n\n            <div className=\"seccion-principal\">\n                <Barra />\n\n                <main>\n                    <FormTarea />\n\n                    <div className=\"contenedor-tareas\">\n                        <ListadoTareas />\n                    </div>\n                </main>\n            </div>\n        </div>\n     );\n}\n \nexport default Proyectos;","export const FORMULARIO_PROYECTO = 'FORMULARIO_PROYECTO'\nexport const OBTENER_PROYECTOS = 'OBTENER_PROYECTOS'\nexport const AGREGAR_PROYECTO = 'AGREGAR_PROYECTO';\nexport const VALIDAR_FORMULARIO = 'VALIDAR_FORMULARIO';\nexport const PROYECTO_ACTUAL = 'PROYECTO_ACTUAL';\nexport const ELIMINAR_PROYECTO = 'ELIMINAR_PROYECTO';\nexport const PROYECTO_ERROR = 'PROYECTO_ERROR';\n\nexport const TAREAS_PROYECTO = 'TAREAS_PROYECTO';\nexport const AGREGAR_TAREA = 'AGREGAR_TAREA';\nexport const VALIDAR_TAREA = 'VALIDAR_TAREA';\nexport const ELIMINAR_TAREA = 'ELIMINAR_TAREA';\nexport const TAREA_ACTUAL = 'TAREA_ACTUAL';\nexport const ACTUALIZAR_TAREA = 'ACTUALIZAR_TAREA';\nexport const LIMPIAR_TAREA = 'LIMPIAR_TAREA';\n\nexport const MOSTRAR_ALERTA = 'MOSTRAR_ALERTA';\nexport const OCULTAR_ALERTA = 'OCULTAR_ALERTA';\n\nexport const REGISTRO_EXITOSO = 'REGISTRO_EXITOSO';\nexport const REGISTRO_ERROR = 'REGISTRO_ERROR';\nexport const OBTENER_USUARIO = 'OBTENER_USUARIO';\nexport const LOGIN_EXITOSO = 'LOGIN_EXITOSO';\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const CERRAR_SESION = 'CERRAR_SESION';","import { \n    FORMULARIO_PROYECTO, \n    OBTENER_PROYECTOS,\n    AGREGAR_PROYECTO,\n    PROYECTO_ERROR,\n    VALIDAR_FORMULARIO,\n    PROYECTO_ACTUAL,\n    ELIMINAR_PROYECTO\n} from '../../types';\n\n // eslint-disable-next-line\nexport default (state, action) => {\n    switch(action.type) {\n        case FORMULARIO_PROYECTO:\n            return {\n                ...state,\n                formulario: true\n            }\n        case OBTENER_PROYECTOS:\n            return {\n                ...state,\n                proyectos: action.payload\n            }\n        case AGREGAR_PROYECTO:\n            return {\n                ...state,\n                proyectos: [...state.proyectos, action.payload],\n                formulario: false,\n                errorformulario: false\n            }\n        case VALIDAR_FORMULARIO:\n            return {\n                ...state, \n                errorformulario: true\n            }\n        case PROYECTO_ACTUAL:\n            return {\n                ...state,\n                proyecto: state.proyectos.filter(proyecto => proyecto._id === action.payload )\n            }\n        case ELIMINAR_PROYECTO:\n            return {\n                ...state,\n                proyectos: state.proyectos.filter(proyecto => proyecto._id !== action.payload ),\n                proyecto: null\n            }\n        case PROYECTO_ERROR:\n            return {\n                ...state,\n                mensaje: action.payload\n            }\n        default:\n            return state;\n    }\n}","import axios from 'axios';\n\nconst clienteAxios = axios.create({\n    baseURL : process.env.REACT_APP_BACKEND_URL\n});\n\nexport default clienteAxios;","import React, { useReducer } from 'react';\n\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport { \n    FORMULARIO_PROYECTO, \n    OBTENER_PROYECTOS,\n    AGREGAR_PROYECTO,\n    PROYECTO_ERROR,\n    VALIDAR_FORMULARIO,\n    PROYECTO_ACTUAL,\n    ELIMINAR_PROYECTO\n} from '../../types';\n\nimport clienteAxios from '../../config/axios';\n\n\nconst ProyectoState = props => {\n\n    const initialState = {\n        proyectos : [],\n        formulario : false,\n        errorformulario: false,\n        proyecto: null, \n        mensaje: null\n    }\n\n    // Dispatch para ejecutar las acciones\n    const [state, dispatch] = useReducer(proyectoReducer, initialState)\n\n    // Serie de funciones para el CRUD\n    const mostrarFormulario = () => {\n        dispatch({\n            type: FORMULARIO_PROYECTO\n        })\n    }\n\n    // Obtener los proyectos\n    const obtenerProyectos = async () => {\n        try {\n            const resultado = await clienteAxios.get('/api/proyectos');\n\n            dispatch({\n                type: OBTENER_PROYECTOS,\n                payload: resultado.data.proyectos\n            })\n        } catch (error) {\n            const alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n            }\n            \n            dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    // Agregar nuevo proyecto\n    const agregarProyecto = async proyecto => {\n\n        try {\n            const resultado = await clienteAxios.post('/api/proyectos', proyecto);\n            console.log(resultado);\n            // Insertar el proyecto en el state\n            dispatch({\n                type: AGREGAR_PROYECTO,\n                payload: resultado.data\n            })\n        } catch (error) {\n            const alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n            }\n            \n            dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    // Valida el formulario por errores\n    const mostrarError = () => {\n        dispatch({\n            type: VALIDAR_FORMULARIO\n        })\n    } \n\n    // Selecciona el Proyecto que el usuario dio click\n    const proyectoActual = proyectoId => {\n        dispatch({\n            type: PROYECTO_ACTUAL,\n            payload: proyectoId\n        })\n    }\n\n    // Elimina un proyecto\n    const eliminarProyecto = async proyectoId => {\n        try {\n            await clienteAxios.delete(`/api/proyectos/${proyectoId}`);\n            dispatch({\n                type: ELIMINAR_PROYECTO,\n                payload: proyectoId\n            })\n        } catch (error) {\n            const alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n            }\n            \n            dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n\n    return (\n        <proyectoContext.Provider\n            value={{\n                proyectos: state.proyectos,\n                formulario: state.formulario,\n                errorformulario: state.errorformulario,\n                proyecto: state.proyecto,\n                mensaje: state.mensaje,\n                mostrarFormulario,\n                obtenerProyectos,\n                agregarProyecto,\n                mostrarError,\n                proyectoActual,\n                eliminarProyecto\n            }}\n        >\n            {props.children}\n        </proyectoContext.Provider>\n        \n    )\n}\n\nexport default ProyectoState;","import { \n    TAREAS_PROYECTO,\n    AGREGAR_TAREA,\n    VALIDAR_TAREA,\n    ELIMINAR_TAREA,\n    TAREA_ACTUAL,\n    ACTUALIZAR_TAREA,\n    LIMPIAR_TAREA\n} from '../../types';\n\n // eslint-disable-next-line\nexport default (state, action) => {\n    switch(action.type) {\n        case TAREAS_PROYECTO:\n            return {\n                ...state,\n                tareasproyecto: action.payload\n            }\n        case AGREGAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: [action.payload, ...state.tareasproyecto],\n                errortarea: false\n            }\n        case VALIDAR_TAREA:\n            return {\n                ...state,\n                errortarea: true\n            }\n        case ELIMINAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.filter(tarea => tarea._id !== action.payload )\n            }\n        case ACTUALIZAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.map(tarea =>  tarea._id === action.payload._id ? action.payload : tarea )\n            }\n        case TAREA_ACTUAL:\n            return {\n                ...state,\n                tareaseleccionada: action.payload\n            }\n        case LIMPIAR_TAREA:\n            return {\n                ...state,\n                tareaseleccionada: null\n            }\n        default:\n            return state;\n    }\n}","import React, { useReducer } from 'react';\nimport TareaContext from './tareaContext';\nimport TareaReducer from './tareaReducer';\n\nimport { \n    TAREAS_PROYECTO,\n    AGREGAR_TAREA,\n    VALIDAR_TAREA,\n    ELIMINAR_TAREA,\n    TAREA_ACTUAL,\n    ACTUALIZAR_TAREA,\n    LIMPIAR_TAREA\n} from '../../types';\n\nimport clienteAxios from '../../config/axios';\n\nconst TareaState = props => {\n    const initialState = {\n        tareasproyecto: [],\n        errortarea: false,\n        tareaseleccionada: null\n    }\n\n    // Crear dispatch y state\n    const [state, dispatch] = useReducer(TareaReducer, initialState);\n\n    // Crear las funciones\n\n    // Obtener las tareas de un proyecto\n    const obtenerTareas = async proyecto => {\n\n        //console.log(proyecto);\n\n        try {\n            const resultado = await clienteAxios.get('/api/tareas', { params: { proyecto }});\n            // console.log(resultado);\n            dispatch({\n                type: TAREAS_PROYECTO,\n                payload: resultado.data.tareas\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    // Agregar una tarea al proyecto seleccionado\n    const agregarTarea = async tarea => {\n        console.log(tarea);\n        try {\n            const resultado = await clienteAxios.post('/api/tareas', tarea);\n            console.log(resultado);\n            dispatch({\n                type: AGREGAR_TAREA,\n                payload: tarea\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    // Valida y muestra un error en caso de que sea necesario\n    const validarTarea = () => {\n        dispatch({\n            type: VALIDAR_TAREA\n        })\n    }\n\n    // Eliminar tarea por id\n    const eliminarTarea = async (id, proyecto) => {\n        try {\n            await clienteAxios.delete(`/api/tareas/${id}`, { params: { proyecto }});\n            dispatch({\n                type: ELIMINAR_TAREA,\n                payload: id\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    // Edita o modifica una tarea\n    const actualizarTarea = async tarea => {\n\n        try {\n            const resultado = await clienteAxios.put(`/api/tareas/${tarea._id}`, tarea);\n            console.log(resultado)\n            dispatch({\n                type: ACTUALIZAR_TAREA,\n                payload: resultado.data.tareaExiste\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    // Extrae una tarea para edición\n    const guardarTareaActual = tarea => {\n        dispatch({\n            type: TAREA_ACTUAL,\n            payload: tarea\n        })\n    }\n\n    // Elimina la tareaseleccionada\n    const limpiarTarea = () => {\n        dispatch({\n            type: LIMPIAR_TAREA\n        })\n    }\n\n    return (\n        <TareaContext.Provider\n            value={{\n                tareasproyecto : state.tareasproyecto,\n                errortarea: state.errortarea,\n                tareaseleccionada: state.tareaseleccionada,\n                obtenerTareas,\n                agregarTarea,\n                validarTarea,\n                eliminarTarea,\n                guardarTareaActual,\n                actualizarTarea,\n                limpiarTarea\n            }}\n        >\n            {props.children}\n        </TareaContext.Provider>\n    )\n}\n\nexport default TareaState;","import { MOSTRAR_ALERTA, OCULTAR_ALERTA} from '../../types';\n\n // eslint-disable-next-line\nexport default (state, action) => {\n    switch(action.type) {\n        case MOSTRAR_ALERTA:\n            return {\n                alerta: action.payload\n            }\n        case OCULTAR_ALERTA:\n            return {\n                alerta: null\n            }\n        default:\n            return state;\n    }\n}","import React, { useReducer } from 'react';\nimport alertaReducer from './alertaReducer';\nimport alertaContext from './alertaContext';\n\nimport { MOSTRAR_ALERTA, OCULTAR_ALERTA} from '../../types';\n\nconst AlertaState = props => {\n    const initialState = {\n        alerta: null\n    }\n\n    const [ state, dispatch ] = useReducer(alertaReducer, initialState);\n\n    // Funciones\n    const mostrarAlerta = (msg, categoria) => {\n        dispatch({\n            type:  MOSTRAR_ALERTA,\n            payload: {\n                msg, \n                categoria\n            }\n        });\n\n        // Después de 5 segundos limpiar la alerta\n        setTimeout(() => {\n            dispatch({\n                type: OCULTAR_ALERTA\n            })\n        }, 5000);\n    }\n\n\n    return (\n        <alertaContext.Provider\n            value={{\n                alerta: state.alerta,\n                mostrarAlerta\n            }}\n        > \n            {props.children}\n        </alertaContext.Provider>\n    )\n}\n\nexport default AlertaState;","import { \n    REGISTRO_EXITOSO,\n    REGISTRO_ERROR,\n    OBTENER_USUARIO,\n    LOGIN_EXITOSO,\n    LOGIN_ERROR,\n    CERRAR_SESION\n} from '../../types';\n\n // eslint-disable-next-line\nexport default (state, action) => {\n    switch(action.type) {\n        case REGISTRO_EXITOSO:\n        case LOGIN_EXITOSO:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                autenticado: true,\n                mensaje: null,\n                cargando: false\n            }\n        case OBTENER_USUARIO: \n            return {\n                ...state,\n                autenticado: true,\n                usuario: action.payload, \n                cargando: false\n            }\n        case CERRAR_SESION:\n        case LOGIN_ERROR:\n        case REGISTRO_ERROR:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                usuario: null,\n                autenticado: null,\n                mensaje: action.payload, \n                cargando: false\n            }\n        \n        default:\n            return state;\n    }\n}","import clienteAxios from './axios';\n\nconst tokenAuth = token => {\n    if(token) {\n        clienteAxios.defaults.headers.common['x-auth-token'] = token;\n    } else {\n        delete clienteAxios.defaults.headers.common['x-auth-token'];\n    }\n}\n\nexport default tokenAuth;","import React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\n\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/token';\n\nimport { \n    REGISTRO_EXITOSO,\n    REGISTRO_ERROR,\n    OBTENER_USUARIO,\n    LOGIN_EXITOSO,\n    LOGIN_ERROR,\n    CERRAR_SESION\n} from '../../types';\n\nconst AuthState = props => {\n    const initialState = {\n        token: localStorage.getItem('token'),\n        autenticado: null,\n        usuario: null, \n        mensaje: null, \n        cargando: true\n    }\n\n    const [ state, dispatch ] = useReducer(AuthReducer, initialState);\n\n    const registrarUsuario = async datos => {\n        try {\n\n            const respuesta = await clienteAxios.post('/api/usuarios', datos);\n            console.log(respuesta.data);\n\n            dispatch({\n                type: REGISTRO_EXITOSO,\n                payload: respuesta.data\n            });\n\n            // Obtener el usuario\n            usuarioAutenticado();\n        } catch (error) {\n            // console.log(error.response.data.msg);\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: REGISTRO_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    // Retorna el usuario autenticado\n    const usuarioAutenticado = async () => {\n        const token = localStorage.getItem('token');\n        if(token) {\n            tokenAuth(token);\n        }\n\n        try {\n            const respuesta = await clienteAxios.get('/api/auth');\n            // console.log(respuesta);\n            dispatch({\n                type: OBTENER_USUARIO,\n                payload: respuesta.data.usuario\n            });\n\n        } catch (error) {\n            console.log(error.response);\n            dispatch({\n                type: LOGIN_ERROR\n            })\n        }\n    }\n\n    // Cuando el usuario inicia sesión\n    const iniciarSesion = async datos => {\n        try {\n            const respuesta = await clienteAxios.post('/api/auth', datos);\n            \n            dispatch({\n                type: LOGIN_EXITOSO,\n                payload: respuesta.data\n            });\n\n            // Obtener el usuario\n            usuarioAutenticado();\n        } catch (error) {\n            console.log(error.response.data.msg);\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: LOGIN_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    // Cierra la sesión del usuario\n    const cerrarSesion = () => {\n        dispatch({\n            type: CERRAR_SESION\n        })\n    }\n\n    return(\n        <AuthContext.Provider\n            value={{\n                token: state.token,\n                autenticado: state.autenticado,\n                usuario: state.usuario,\n                mensaje: state.mensaje,\n                cargando: state.cargando,\n                registrarUsuario,\n                iniciarSesion,\n                usuarioAutenticado,\n                cerrarSesion\n            }}\n        >{props.children}\n\n        </AuthContext.Provider>\n    )\n}\nexport default AuthState;\n","import React, { useContext, useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthContext from '../../context/autenticacion/authContext';\n\nconst RutaPrivada = ({ component: Component, ...props  }) => {\n\n    const authContext = useContext(AuthContext);\n    const { autenticado, cargando, usuarioAutenticado } = authContext;\n\n    useEffect(() => {\n        usuarioAutenticado();\n        // eslint-disable-next-line\n    }, []);\n\n    return ( \n        <Route { ...props } render={ props => !autenticado && !cargando ?  (\n            <Redirect to=\"/\" />\n        )  : (\n            <Component {...props} />\n        ) } />\n\n     );\n}\n \nexport default RutaPrivada;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './components/auth/Login';\nimport NuevaCuenta from './components/auth/NuevaCuenta';\nimport Proyectos from './components/proyectos/Proyectos';\n\nimport ProyectoState from './context/proyectos/proyectoState';\nimport TareaState from './context/tareas/tareaState';\nimport AlertaState from './context/alertas/alertaState';\nimport AuthState from './context/autenticacion/authState';\nimport tokenAuth from './config/token';\nimport RutaPrivada from './components/rutas/RutaPrivada';\n\n// Revisar si tenemos un token\nconst token = localStorage.getItem('token');\nif(token) {\n  tokenAuth(token);\n}\n\nfunction App() {\n  return (\n    <ProyectoState>\n      <TareaState>\n        <AlertaState>\n          <AuthState>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Login} />\n                    <Route exact path=\"/nueva-cuenta\" component={NuevaCuenta} />\n                    <RutaPrivada exact path=\"/proyectos\" component={Proyectos} />\n                </Switch>\n            </Router>\n          </AuthState>\n        </AlertaState>\n      </TareaState>\n    </ProyectoState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}